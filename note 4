Here's the complete implementation for search functionality across all diary pages, maintaining your design requirements:

### 1. Universal Search Component (`search-component.js`)
```javascript
export function initDiarySearch(diaryType) {
  const searchInput = document.getElementById('diarySearch');
  const resultsContainer = document.getElementById('searchResults');

  searchInput.addEventListener('input', async (e) => {
    const term = e.target.value.trim();
    if (term.length < 2) {
      resultsContainer.innerHTML = '';
      return;
    }

    // Search both clients and contacts
    const [clientResults, contactResults] = await Promise.all([
      searchCompanies(term),
      searchContacts(term)
    ]);

    // Filter by diary type availability
    const filteredResults = [...clientResults, ...contactResults].filter(item => {
      return item.diaryRefs && item.diaryRefs[diaryType];
    });

    displayResults(filteredResults, diaryType);
  });
}

async function searchCompanies(term) {
  const q = query(
    ref(db, 'clients'),
    orderByChild('name'),
    startAt(term),
    endAt(term + '\uf8ff')
  );
  const snapshot = await get(q);
  return Object.entries(snapshot.val() || {}).map(([id, data]) => ({
    id,
    name: data.name,
    type: 'company',
    diaryRefs: data.diaryRefs || {}
  }));
}

async function searchContacts(term) {
  const q = query(
    ref(db, 'contacts'),
    orderByChild('searchName'), // Add a searchName field with "FirstName LastName"
    startAt(term),
    endAt(term + '\uf8ff')
  );
  const snapshot = await get(q);
  return Object.entries(snapshot.val() || {}).map(([id, data]) => ({
    id,
    name: `${data.firstName} ${data.lastName}`,
    type: data.companyId ? 'employee' : 'individual',
    diaryRefs: data.diaryRefs || {}
  }));
}

function displayResults(results, diaryType) {
  const container = document.getElementById('searchResults');
  container.innerHTML = results.map(result => `
    <div class="search-result" 
         onclick="loadDiaryEntries('${result.id}', '${diaryType}')">
      ${result.name} (${result.type})
      <span class="badge">${diaryType}</span>
    </div>
  `).join('');
}

window.loadDiaryEntries = async (clientId, diaryType) => {
  const entries = await getDiaryEntries(clientId, diaryType);
  renderEntries(entries, diaryType);
};
```

### 2. Diary-Specific Search Implementation

#### `daily-diary.html`
```html
<div class="search-box">
  <input type="text" id="diarySearch" placeholder="Search clients/companies...">
  <div id="searchResults" class="search-results"></div>
</div>

<script type="module">
  import { initDiarySearch } from './search-component.js';
  initDiarySearch('daily');
  
  async function renderEntries(entries, diaryType) {
    const board = document.getElementById('bulletinBoard');
    board.innerHTML = '';
    
    entries.forEach(entry => {
      const postIt = document.createElement('div');
      postIt.className = 'post-it';
      postIt.innerHTML = `
        <div class="time">${entry.time}</div>
        <div class="notes">${entry.notes}</div>
        <div class="bf-date">BF: ${formatDate(entry.bfDate)}</div>
        ${entry.softwareUsed ? `<div class="software">Tools: ${entry.softwareUsed.join(', ')}</div>` : ''}
      `;
      board.appendChild(postIt);
    });
  }
</script>
```

#### `check-diary.html`
```html
<div class="cheque-search">
  <input type="text" id="diarySearch" placeholder="Search payees...">
  <div id="searchResults"></div>
</div>

<script type="module">
  import { initDiarySearch } from './search-component.js';
  initDiarySearch('check');
  
  async function renderEntries(entries) {
    const container = document.getElementById('chequesContainer');
    container.innerHTML = entries.map(entry => `
      <div class="cheque">
        <div class="payee">${entry.clientName}</div>
        <div class="amount">$${entry.amount.toFixed(2)}</div>
        <div class="check-no">#${entry.checkNo}</div>
      </div>
    `).join('');
  }
</script>
```

### 3. Enhanced Firebase Data Structure
```json
{
  "clients": {
    "comp_ABC_LTD": {
      "name": "ABC Limited",
      "searchName": "abc limited",
      "diaryRefs": {
        "daily": true,
        "check": true
      }
    }
  },
  "contacts": {
    "cont_JOHN_DOE": {
      "firstName": "John",
      "lastName": "Doe",
      "searchName": "john doe",
      "companyId": "comp_ABC_LTD",
      "diaryRefs": {
        "daily": true,
        "worksheets": true
      }
    }
  },
  "diaries": {
    "daily": {
      "entry_001": {
        "clientId": "cont_JOHN_DOE",
        "clientName": "John Doe (ABC Ltd)",
        "searchRef": ["john", "doe", "abc", "ltd"]
      }
    }
  }
}
```

### 4. Search Optimization Functions
```javascript
// Add to db-operations.js
export async function indexForSearch(clientId, name) {
  const searchTerms = name.toLowerCase().split(' ');
  await update(ref(db, `clients/${clientId}/searchRef`), searchTerms);
}

// When adding new clients/contacts:
await indexForSearch("comp_ABC_LTD", "ABC Limited");
```

### 5. Security Rules for Search
```json
{
  "rules": {
    "clients": {
      "$clientId": {
        "searchName": {
          ".validate": "newData.isString() && newData.val().matches(/^[a-z ]+$/)"
        },
        "searchRef": {
          ".validate": "newData.hasChildren() && newData.val().isArray()"
        }
      }
    }
  }
}
```

### 6. Styling for Search Components
```css
/* search-component.css */
.search-box {
  position: relative;
  margin: 20px;
}

#diarySearch {
  width: 100%;
  padding: 12px;
  border: 2px solid #4CAF50;
  border-radius: 4px;
}

.search-results {
  position: absolute;
  width: 100%;
  max-height: 300px;
  overflow-y: auto;
  background: white;
  border: 1px solid #ddd;
  z-index: 100;
}

.search-result {
  padding: 10px;
  border-bottom: 1px solid #eee;
  cursor: pointer;
}

.search-result:hover {
  background: #E8F5E9;
}

.badge {
  float: right;
  background: #4CAF50;
  color: white;
  padding: 2px 6px;
  border-radius: 10px;
  font-size: 0.8em;
}
```

### Implementation Notes:

1. **Search Fields**:
   - `searchName`: Lowercase full name for simple matching
   - `searchRef`: Array of individual search terms

2. **Diary-Specific Filtering**:
   - Only shows results that have entries in the current diary type
   - Uses the `diaryRefs` flags for quick filtering

3. **Performance Optimization**:
   - Client-side filtering after initial Firebase query
   - Search term indexing for faster results

4. **UI Integration**:
   - Consistent search bar across all diary pages
   - Type-specific result rendering
   - Visual indicators for diary type

5. **Phone Number Handling**:
   - Maintains +1(868) format in all displays
   - Included in contact search results

To implement:
1. Add the search components to each diary page
2. Update your data structure with search fields
3. Deploy the new security rules
4. Initialize the search on each page load

This gives you:
- Unified search across all diaries
- Type-specific result displays
- Maintains your visual design language
- Fast, relevant search results
- Proper Caribbean phone number handling



Here's the solution to handle case-insensitive search while maintaining your uppercase storage format:

### 1. Search Optimization Solution

#### Problem:
- Data stored as: `"JOHN DOE"` (uppercase)
- Users may search: "john doe" or "John Doe"

#### Solution:
```javascript
// In search-component.js
async function searchContacts(term) {
  const searchTerm = term.toLowerCase(); // Convert search to lowercase
  const q = query(
    ref(db, 'contacts'),
    orderByChild('searchKey'), // Add this field to all contacts
    startAt(searchTerm),
    endAt(searchTerm + '\uf8ff')
  );
  const snapshot = await get(q);
  return Object.entries(snapshot.val() || {}).map(([id, data]) => ({
    id,
    name: data.firstName + ' ' + data.lastName, // Preserve original case for display
    type: data.companyId ? 'employee' : 'individual'
  }));
}
```

### 2. Data Preparation (One-time Migration)
Add this to your existing data conversion script:

```javascript
// Add to db-operations.js
export async function prepareSearchFields() {
  const updates = {};
  
  // Process clients
  const clients = await get(ref(db, 'clients'));
  clients.forEach((client) => {
    updates[`clients/${client.key}/searchKey`] = client.val().name.toLowerCase();
  });
  
  // Process contacts
  const contacts = await get(ref(db, 'contacts'));
  contacts.forEach((contact) => {
    const fullName = `${contact.val().firstName} ${contact.val().lastName}`.toLowerCase();
    updates[`contacts/${contact.key}/searchKey`] = fullName;
  });
  
  await update(ref(db), updates);
}
```

### 3. Security Rules Update
```json
{
  "rules": {
    "clients": {
      "$clientId": {
        "searchKey": {
          ".validate": "newData.isString() && newData.val() == newData.parent().child('name').val().toLowerCase()"
        }
      }
    },
    "contacts": {
      "$contactId": {
        "searchKey": {
          ".validate": "newData.isString() && 
                      newData.val() == (newData.parent().child('firstName').val() + ' ' + 
                                       newData.parent().child('lastName').val()).toLowerCase()"
        }
      }
    }
  }
}
```

### 4. Implementation Example

#### Before (Original Data):
```json
{
  "contacts": {
    "cont_JOHN_DOE": {
      "firstName": "JOHN",
      "lastName": "DOE"
    }
  }
}
```

#### After Migration:
```json
{
  "contacts": {
    "cont_JOHN_DOE": {
      "firstName": "JOHN",
      "lastName": "DOE",
      "searchKey": "john doe"
    }
  }
}
```

### 5. Search Behavior Examples

| User Searches | Matches Record | Works? |
|---------------|----------------|--------|
| "john"        | "JOHN DOE"     | ✅ Yes |
| "DOE"         | "JOHN DOE"     | ✅ Yes |
| "John D"      | "JOHN DOE"     | ✅ Yes |
| "jOhN dOe"    | "JOHN DOE"     | ✅ Yes |

### 6. Key Benefits

1. **Case-Insensitive Matching**:
   - `searchKey` stores lowercase versions
   - All queries compare lowercase terms

2. **Preserved Display Format**:
   - Original uppercase remains for UI display
   - Only search functionality uses lowercase

3. **Minimal Data Duplication**:
   - Only one additional field per record
   - Small storage overhead

4. **No Client-Side Processing**:
   - All heavy lifting done by Firebase queries
   - Fast response times

### 7. Maintenance

When adding new records:
```javascript
async function addContact(firstName, lastName) {
  const contactRef = ref(db, 'contacts');
  const newContact = {
    firstName: firstName.toUpperCase(), // Your preferred storage format
    lastName: lastName.toUpperCase(),
    searchKey: `${firstName} ${lastName}`.toLowerCase() // Search optimization
  };
  await push(contactRef, newContact);
}
```

This solution gives you:
- Case-insensitive search while maintaining uppercase storage
- No changes to your existing data display
- Minimal performance impact
- Easy to implement and maintain
